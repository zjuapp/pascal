xor esi,esi
mov esi, 4
mov ebp, esp
mov [ebp + 4], esi
xor esi,esi
mov esi, 0
mov ebp, esp
mov [ebp + 8], esi
mov ebp, esp
mov esi, [ebp + 4]
xor edi,edi
mov edi, 3
cmp edi, esi
pushf
pop eax
shr eax, 7
and eax, 1
mov esi, eax

cmp esi, 0
jz d
xor esi,esi
mov esi, 0

mov ecx, esi
f:
xor esi,esi
mov esi, 10

cmp ecx, esi
jz g
mov ebp, esp
mov esi, [ebp + 4]
xor edi,edi
mov edi, 4
add esi, edi
mov ebp, esp
mov [ebp + 4], esi

add ecx, 1
jmp f
g:;

jmp e
d:

h:
mov ebp, esp
mov esi, [ebp + 4]
xor edi,edi
mov edi, 1
cmp edi, esi
pushf
pop eax
shr eax, 7
and eax, 1
mov esi, eax

cmp esi, 0
jz i
mov ebp, esp
mov esi, [ebp + 4]
xor edi,edi
mov edi, 1
sub esi, edi
mov ebp, esp
mov [ebp + 4], esi
jmp h
i:;
e:
;
c:

j:
mov ebp, esp
mov esi, [ebp + 4]
xor edi,edi
mov edi, 10
sub esi, edi
mov ebp, esp
mov [ebp + 4], esi
mov ebp, esp
mov esi, [ebp + 8]
xor edi,edi
mov edi, 1
add esi, edi
mov ebp, esp
mov [ebp + 8], esi
mov ebp, esp
mov esi, [ebp + 8]
xor edi,edi
mov edi, 10
cmp edi, esi
pushf
pop eax
shr eax, 7
and eax, 1
mov esi, eax

cmp esi, 0
jnz k
k:;
mov ebp, esp
mov esi, [ebp + 8]
xor edi,edi
mov edi, 4
mov eax, esi
idiv edi
mov esi, edx

cmp esi, 0
jz l
cmp esi, 1
jz m
cmp esi, 2
jz n
cmp esi, 3
jz o
l:
xor esi,esi
mov esi, 0
mov ebp, esp
mov [ebp + 0], esi
jmp p
m:
xor esi,esi
mov esi, 1
mov ebp, esp
mov [ebp + 0], esi
jmp p
n:
xor esi,esi
mov esi, 2
mov ebp, esp
mov [ebp + 0], esi
jmp p
o:
xor esi,esi
mov esi, 3
mov ebp, esp
mov [ebp + 0], esi
jmp p
p:;
jmp c
outer_add:
mov ebp, esp
mov esi, [ebp + 12]
mov ebp, esp
mov edi, [ebp + 8]
add esi, edi
mov ebp, esp
mov [ebp + 16], esi
ret
