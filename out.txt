xor esi,esi
mov esi, 3
xor edi,edi
mov edi, 2
add esi, edi
mov ebp, esp
mov [ebp + 60], esi
xor esi,esi
mov esi, 4
mov ebp, esp
mov [ebp + 44], esi
xor esi,esi
mov esi, 4
mov ebp, esp
mov [ebp + 44], esi
xor esi,esi
mov esi, 2
xor edi,edi
mov edi, 5

imul esi, 4
mov ebp, esp

mov [ebp + esi + 4], edi
sub esp, 12
mov eax ,60
mov [esp + 4], eax
mov eax ,44
mov [esp + 0], eax
call add
add esp, 8
mov eax, [esp]
add esp, 4
mov ebp, esp
mov ebx, [ebp + 60]
xor ecx,ecx
mov ecx, 3
cmp ecx, ebx
pushf
pop eax
shr eax, 7
and eax, 1
mov ebx, eax

cmp ebx, 0
jz c
mov ebp, esp
mov esi, [ebp + 44]
xor edi,edi
mov edi, 1
add esi, edi
mov ebp, esp
mov [ebp + 44], esi

jmp d
c:
mov ebp, esp
mov esi, [ebp + 44]
xor edi,edi
mov edi, 1
sub esi, edi
mov ebp, esp
mov [ebp + 44], esi

d:
;
xor esi,esi
mov esi, 1
undefine_expr
mov ecx, esi
e:
xor esi,esi
mov esi, 10

cmp ecx, esi
jz f
mov ebp, esp
mov esi, [ebp + 44]
xor edi,edi
mov edi, 1
add esi, edi
mov ebp, esp
mov [ebp + 44], esi
fuck for

add ecx, 1
jmp e
f:;
add:
mov eax, [esp + 12]
add eax, 20
mov [esp + 12], eax
mov eax, [esp + 8]
add eax, 20
mov [esp + 8], eax
mov ebp, esp
mov esi, [ebp + 12]
mov ebp, esp
mov edi, [ebp + 8]
add esi, edi
mov ebp, esp
mov [ebp + 16], esi
0
